---
# Write a shell script to disable inactive FreeIPA users.  This cron
# job will be run daily.
write_files:
  - path: /etc/cron.daily/disable_inactive_users.sh
    permissions: "0500"
    owner: root:root
    content: |
      #!/usr/bin/env bash

      # Input variables are:
      # days_to_become_inactive - the number of days a user can go
      # without logging in before having his or her account disabled
      # due to inactivity (e.g. 45)
      # domain - the domain for the IPA server (e.g. example.com)

      set -o nounset
      set -o errexit
      set -o pipefail

      ###
      # We're running as root, so login to kerberos using the host's keytab
      #
      # It would be better to create a kerberos service instead, but
      # that is left as a future improvement.
      ###
      kinit -k -t /etc/krb5.keytab

      ###
      # Convert the domain into an LDAP searchbase
      ###
      searchbase="cn=users,cn=accounts"
      # The "domain" item below that looks like shell variable is actually
      # replaced by the Terraform templating engine.  Hence we can ignore
      # the "undefined variable" warnings from shellcheck.
      #
      # shellcheck disable=SC2154
      g="${domain}"
      # While g still contains a dot character...
      while grep -F "." <<< "$g"
      do
          # Extract the longest non-dot-containing string from the beginning
          # of $g
          tmp=$(expr "$g" : '\([^\.]*\)')
          # Append $tmp onto the end of $searchbase
          searchbase=$searchbase,dc=$tmp
          # Remove tmp and its trailing period from $g
          #
          # I'd like to do this more simply, but constructs with
          # complicated braces seem to foul up the templating foo in
          # ../cloud_init.tf.
          length_tmp=$(expr length $tmp)
          length_g=$(expr length $g)
          g=$(expr substr $g $(($length_tmp + 2)) $length_g)
      done
      # There are no more dots in $g, so we just have to append the last bit
      # of $g onto $searchbase
      searchbase=$searchbase,dc=$g

      ###
      # Determine the date ${days_to_become_inactive} days ago, in a
      # format that ldapsearch likes
      ###
      distant_past=$(date \
                         --date="$(date) -${days_to_become_inactive} days" \
                         +%Y%m%d%H%M%SZ)

      ###
      # Query LDAP to determine all users that are inactive
      ###
      users_to_disable=$(ldapsearch \
                               -b "$searchbase" \
                               "(krbLastSuccessfulAuth<=$distant_past)" \
                               uid \
                               2>/dev/null \
                             | grep "^uid:" \
                             | sed "s/^uid: \(.*\)/\1/")

      ###
      # Disable the users
      ###
      for user in $users_to_disable
      do
          # The ipa user-disable command may fail if the user is
          # already disabled, for example, but that's not really an
          # error condition for us.  If it fails for any other reason,
          # the reason should be discernible from the cron logs.
          #
          # In any event, it makes sense to disable errexit for the
          # ipa user-disable command since, even if the disabling of a
          # particular user fails, we want the script to proceed with
          # attempting to disable any other inactive users.
          set +o errexit
          ipa user-disable "$user"
          set -o errexit
      done

      ###
      # Discard the kerberos credentials
      ###
      kdestroy
